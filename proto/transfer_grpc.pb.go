// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/transfer.proto

package transfer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MoneyTransferService_ExecuteTransfer_FullMethodName   = "/transfer.MoneyTransferService/ExecuteTransfer"
	MoneyTransferService_ValidateTransfer_FullMethodName  = "/transfer.MoneyTransferService/ValidateTransfer"
	MoneyTransferService_GetAccountBalance_FullMethodName = "/transfer.MoneyTransferService/GetAccountBalance"
)

// MoneyTransferServiceClient is the client API for MoneyTransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for financial transactions
type MoneyTransferServiceClient interface {
	// Primary transfer method
	ExecuteTransfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	// Pre-transfer validation
	ValidateTransfer(ctx context.Context, in *ValidationRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	// Balance inquiry
	GetAccountBalance(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error)
}

type moneyTransferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMoneyTransferServiceClient(cc grpc.ClientConnInterface) MoneyTransferServiceClient {
	return &moneyTransferServiceClient{cc}
}

func (c *moneyTransferServiceClient) ExecuteTransfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, MoneyTransferService_ExecuteTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransferServiceClient) ValidateTransfer(ctx context.Context, in *ValidationRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, MoneyTransferService_ValidateTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyTransferServiceClient) GetAccountBalance(ctx context.Context, in *Account, opts ...grpc.CallOption) (*Account, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account)
	err := c.cc.Invoke(ctx, MoneyTransferService_GetAccountBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoneyTransferServiceServer is the server API for MoneyTransferService service.
// All implementations must embed UnimplementedMoneyTransferServiceServer
// for forward compatibility.
//
// Service definition for financial transactions
type MoneyTransferServiceServer interface {
	// Primary transfer method
	ExecuteTransfer(context.Context, *TransferRequest) (*TransferResponse, error)
	// Pre-transfer validation
	ValidateTransfer(context.Context, *ValidationRequest) (*TransferResponse, error)
	// Balance inquiry
	GetAccountBalance(context.Context, *Account) (*Account, error)
	mustEmbedUnimplementedMoneyTransferServiceServer()
}

// UnimplementedMoneyTransferServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMoneyTransferServiceServer struct{}

func (UnimplementedMoneyTransferServiceServer) ExecuteTransfer(context.Context, *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTransfer not implemented")
}
func (UnimplementedMoneyTransferServiceServer) ValidateTransfer(context.Context, *ValidationRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateTransfer not implemented")
}
func (UnimplementedMoneyTransferServiceServer) GetAccountBalance(context.Context, *Account) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountBalance not implemented")
}
func (UnimplementedMoneyTransferServiceServer) mustEmbedUnimplementedMoneyTransferServiceServer() {}
func (UnimplementedMoneyTransferServiceServer) testEmbeddedByValue()                              {}

// UnsafeMoneyTransferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoneyTransferServiceServer will
// result in compilation errors.
type UnsafeMoneyTransferServiceServer interface {
	mustEmbedUnimplementedMoneyTransferServiceServer()
}

func RegisterMoneyTransferServiceServer(s grpc.ServiceRegistrar, srv MoneyTransferServiceServer) {
	// If the following call pancis, it indicates UnimplementedMoneyTransferServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MoneyTransferService_ServiceDesc, srv)
}

func _MoneyTransferService_ExecuteTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyTransferServiceServer).ExecuteTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoneyTransferService_ExecuteTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyTransferServiceServer).ExecuteTransfer(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoneyTransferService_ValidateTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyTransferServiceServer).ValidateTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoneyTransferService_ValidateTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyTransferServiceServer).ValidateTransfer(ctx, req.(*ValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MoneyTransferService_GetAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyTransferServiceServer).GetAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MoneyTransferService_GetAccountBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyTransferServiceServer).GetAccountBalance(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

// MoneyTransferService_ServiceDesc is the grpc.ServiceDesc for MoneyTransferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MoneyTransferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transfer.MoneyTransferService",
	HandlerType: (*MoneyTransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteTransfer",
			Handler:    _MoneyTransferService_ExecuteTransfer_Handler,
		},
		{
			MethodName: "ValidateTransfer",
			Handler:    _MoneyTransferService_ValidateTransfer_Handler,
		},
		{
			MethodName: "GetAccountBalance",
			Handler:    _MoneyTransferService_GetAccountBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/transfer.proto",
}
